// Generated by Haxe 4.0.0-rc.2+92c7833
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var client_ClientApp = function() { };
client_ClientApp.__name__ = true;
client_ClientApp.main = function() {
	var thing = new client_data_Thing();
	var tmp = window.document.body.appendChild(window.document.createElement("div"));
	var __r = [];
	var this1 = { f : function() {
		return thing;
	}};
	var __ret = { thing : tink_state__$Observable_Observable_$Impl_$.auto(this1)};
	__r.push(client_ui_ThingsView.fromHxx(__ret));
	coconut_ui_Renderer.mount(tmp,__r[0]);
};
var client_data_Thing = function() {
	this._updatePerformed = new tink_core_SignalTrigger();
	this.updatePerformed = this._updatePerformed;
	this.foo = "bar";
	var this1 = new tink_state__$State_SimpleState(0,null,null);
	this.__coco_transitionCount = this1;
	this.errorTrigger = tink_core__$Signal_Signal_$Impl_$.trigger();
	this.transitionErrors = this.errorTrigger;
	this.observables = { foo : tink_state__$Observable_Observable_$Impl_$.const(this.foo), isInTransition : tink_state__$Observable_Observable_$Impl_$.map(this.__coco_transitionCount,tink_state__$Observable_Transform_$Impl_$.plain(function(count) {
		return count > 0;
	}))};
};
client_data_Thing.__name__ = true;
var React_Component = require("react").Component;
var coconut_ui_ViewBase = function(rendered,mounted,updated,unmounting) {
	React_Component.call(this);
	this.state = this.__snap();
	this.__rendered = rendered;
	this.__viewMounted = mounted;
	this.__viewUpdated = updated;
	this.__viewUnmounting = unmounting;
};
coconut_ui_ViewBase.__name__ = true;
coconut_ui_ViewBase.createFragment = function(attr,children) {
	var tmp = [React_Fragment,attr].concat(children);
	return React.createElement.apply(null,tmp);
};
coconut_ui_ViewBase.fromHxx = function(props) {
	return React.createElement(react__$ReactType_ReactType_$Impl_$.fromComp(coconut_ui_ViewBase),props);
};
coconut_ui_ViewBase.__super__ = React_Component;
coconut_ui_ViewBase.prototype = $extend(React_Component.prototype,{
	__snap: function() {
		var _gthis = this;
		return { vtree : new tink_core__$Lazy_LazyFunc(function() {
			return tink_state__$Observable_Observable_$Impl_$.get_value(_gthis.__rendered);
		})};
	}
	,componentDidMount: function() {
		var _gthis = this;
		this.__link = tink_state__$Observable_Observable_$Impl_$.bind(this.__rendered,null,function(_) {
			var tmp = _gthis.__snap();
			_gthis.setState(tmp);
		});
		if(this.__viewMounted != null) {
			this.__viewMounted();
		}
	}
	,componentDidUpdate: function(_,_1) {
		if(this.__viewUpdated != null) {
			this.__viewUpdated();
		}
	}
	,componentWillUnmount: function() {
		var this1 = this.__link;
		if(this1 != null) {
			this1.cancel();
		}
		if(this.__viewUnmounting != null) {
			this.__viewUnmounting();
		}
	}
	,reactify: function() {
		if(this.__rewrapped == null) {
			this.__rewrapped = React.createElement(react__$ReactType_ReactType_$Impl_$.fromComp(coconut_ui__$ViewBase_Rewrapped),{ target : this});
		}
		return this.__rewrapped;
	}
	,shouldComponentUpdate: function(_,next) {
		return this.state.vtree.get() != next.vtree.get();
	}
	,render: function() {
		var ret = this.state.vtree.get();
		if(typeof ret == "undefined") {
			return null;
		}
		return ret;
	}
});
var coconut_ui_View = function(render,shouldUpdate,track,beforeRerender,mounted,updated) {
	this.__au = [];
	this.__bc = [];
	this.__bu = [];
	this._coco_revision = new tink_state__$State_SimpleState(0,null,null);
	this.viewId = coconut_ui_View.idCounter++;
	var _gthis = this;
	var firstTime = true;
	var last = null;
	var hasBeforeRerender = beforeRerender != null;
	var hasUpdated = updated != null;
	var lastRev = tink_state__$State_State_$Impl_$.get_value(this._coco_revision);
	var renderView = function() {
		var curRev = tink_state__$State_State_$Impl_$.get_value(_gthis._coco_revision);
		if(track != null) {
			track();
		}
		if(firstTime) {
			firstTime = false;
		} else {
			if(curRev == lastRev && shouldUpdate != null && !shouldUpdate()) {
				return last;
			}
			var hasCallbacks = _gthis.__bc.length > 0;
			if(hasBeforeRerender || hasCallbacks) {
				tink_state__$Observable_Observable_$Impl_$.untracked(function() {
					if(hasBeforeRerender) {
						beforeRerender();
					}
					if(hasCallbacks) {
						var _g = 0;
						var _g1 = _gthis.__bc.splice(0,_gthis.__bc.length);
						while(_g < _g1.length) {
							var c = _g1[_g];
							++_g;
							tink_core__$Callback_Callback_$Impl_$.invoke(c,false);
						}
					}
				});
			}
		}
		lastRev = curRev;
		last = render();
		return last;
	};
	var this1 = { f : renderView};
	coconut_ui_ViewBase.call(this,tink_state__$Observable_Observable_$Impl_$.auto(this1),mounted,function() {
		var hasCallbacks1 = _gthis.__au.length > 0;
		if(hasUpdated || hasCallbacks1) {
			tink_state__$Observable_Observable_$Impl_$.untracked(function() {
				if(hasUpdated) {
					updated();
				}
				if(hasCallbacks1) {
					var _g2 = 0;
					var _g11 = _gthis.__au.splice(0,_gthis.__au.length);
					while(_g2 < _g11.length) {
						var c1 = _g11[_g2];
						++_g2;
						tink_core__$Callback_Callback_$Impl_$.invoke(c1,tink_core_Noise.Noise);
					}
				}
			});
		}
	},function() {
		last = null;
		firstTime = true;
		_gthis.__beforeUnmount();
	});
};
coconut_ui_View.__name__ = true;
coconut_ui_View.__super__ = coconut_ui_ViewBase;
coconut_ui_View.prototype = $extend(coconut_ui_ViewBase.prototype,{
	__beforeUnmount: function() {
		var _g = 0;
		var _g1 = this.__bu.splice(0,this.__bu.length);
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c != null) {
				c.cancel();
			}
		}
		var _g2 = 0;
		var _g3 = this.__bc.splice(0,this.__bu.length);
		while(_g2 < _g3.length) {
			var c1 = _g3[_g2];
			++_g2;
			tink_core__$Callback_Callback_$Impl_$.invoke(c1,true);
		}
	}
	,forceUpdate: function(callback) {
		this._coco_revision.set(tink_state__$State_State_$Impl_$.get_value(this._coco_revision) + 1);
		if(callback != null) {
			this.__au.push(tink_core__$Callback_Callback_$Impl_$.fromNiladic(callback));
		}
	}
});
var client_ui_ThingsView = function(__coco_data_) {
	this.__tink_defaults0 = { };
	this.__slots = { thing : new coconut_ui_tools_Slot(this,null)};
	this.__initAttributes(__coco_data_);
	var snapshot = null;
	coconut_ui_View.call(this,$bind(this,this.coconutRender),null,null,null,null,null);
};
client_ui_ThingsView.__name__ = true;
client_ui_ThingsView.fromHxx = function(attributes) {
	return React.createElement(react__$ReactType_ReactType_$Impl_$.fromComp(client_ui_ThingsView),attributes);
};
client_ui_ThingsView.__super__ = coconut_ui_View;
client_ui_ThingsView.prototype = $extend(coconut_ui_View.prototype,{
	coconutRender: function() {
		var __r = [];
		var __r1 = [];
		var __r2 = [];
		__r2.push(tink_state__$Observable_Observable_$Impl_$.get_value(this.__slots.thing).foo);
		var __ret = { };
		__r1.push(coconut_react_Html.h("h1",__ret,__r2));
		var __ret1 = { };
		__r.push(coconut_react_Html.h("div",__ret1,__r1));
		return __r[0];
	}
	,get_thing: function() {
		return tink_state__$Observable_Observable_$Impl_$.get_value(this.__slots.thing);
	}
	,__initAttributes: function(attributes) {
		this.__slots.thing.setData(attributes.thing);
	}
});
var coconut_react_Html = function() { };
coconut_react_Html.__name__ = true;
coconut_react_Html.h = function(tag,attr,children) {
	if(children == null) {
		return React.createElement(react__$ReactType_ReactType_$Impl_$.fromString(tag),attr);
	} else {
		var tmp = [tag,attr].concat(children);
		return React.createElement.apply(null,tmp);
	}
};
var coconut_react__$Key_Key_$Impl_$ = {};
coconut_react__$Key_Key_$Impl_$.__name__ = true;
coconut_react__$Key_Key_$Impl_$.ofObj = function(o) {
	var id = o.__id__ || (o.__id__ = $global.$haxeUID++);
	return id;
};
var coconut_ui_Renderer = function() { };
coconut_ui_Renderer.__name__ = true;
coconut_ui_Renderer.mount = function(target,vdom) {
	ReactDOM.render(vdom,target);
};
var coconut_ui__$ViewBase_Rewrapped = function(props,context) {
	React_Component.call(this,props,context);
};
coconut_ui__$ViewBase_Rewrapped.__name__ = true;
coconut_ui__$ViewBase_Rewrapped.fromHxx = function(props) {
	return React.createElement(react__$ReactType_ReactType_$Impl_$.fromComp(coconut_ui__$ViewBase_Rewrapped),props);
};
coconut_ui__$ViewBase_Rewrapped.__super__ = React_Component;
coconut_ui__$ViewBase_Rewrapped.prototype = $extend(React_Component.prototype,{
	componentDidMount: function() {
		this.props.target.componentDidMount();
	}
	,componentDidUpdate: function(_,_1) {
		this.props.target.componentDidUpdate(null,null);
	}
	,componentWillUnmount: function() {
		this.props.target.componentWillUnmount();
	}
	,render: function() {
		var _gthis = this;
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
		var ret = tink_state__$Observable_Observable_$Impl_$.measure(this.props.target.__rendered);
		this.link = ret.b.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
			_gthis.forceUpdate();
		}));
		return ret.a;
	}
});
var coconut_ui_tools_Slot = function(owner,compare) {
	this.owner = owner;
	var tmp;
	if(compare == null) {
		tmp = function(a,b) {
			return a == b;
		};
	} else {
		var v = compare;
		tmp = v;
	}
	this.compare = tmp;
};
coconut_ui_tools_Slot.__name__ = true;
coconut_ui_tools_Slot.prototype = {
	poll: function() {
		var _gthis = this;
		if(this.last == null) {
			if(this.data == null) {
				var this1 = new tink_core_MPair(null,new tink_core_FutureTrigger());
				this.last = this1;
			} else {
				var m = tink_state__$Observable_Observable_$Impl_$.measure(this.data);
				var this2 = new tink_core_MPair(m.a,new tink_core_FutureTrigger());
				this.last = this2;
				this.link = m.b.handle(($_=this.last.b,$bind($_,$_.trigger)));
			}
			this.last.b.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
				_gthis.last = null;
			}));
		}
		var this3 = new tink_core_MPair(this.last.a,this.last.b);
		var this4 = this3;
		return this4;
	}
	,setData: function(data) {
		this.data = data;
		if(this.last != null) {
			var this1 = this.link;
			if(this1 != null) {
				this1.cancel();
			}
			if(data != null) {
				var _e = data;
				var m = tink_state__$Observable_Observable_$Impl_$.untracked(function() {
					return tink_state__$Observable_Observable_$Impl_$.measure(_e);
				});
				if(this.compare(m.a,this.last.a)) {
					this.link = m.b.handle(($_=this.last.b,$bind($_,$_.trigger)));
				} else {
					this.last.b.trigger(tink_core_Noise.Noise);
				}
			}
		}
	}
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = $global.$haxeUID++);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var React_Fragment = require("react").Fragment;
var React = require("react");
var ReactDOM = require("react-dom");
var react__$ReactType_ReactType_$Impl_$ = {};
react__$ReactType_ReactType_$Impl_$.__name__ = true;
react__$ReactType_ReactType_$Impl_$.fromString = function(s) {
	return s;
};
react__$ReactType_ReactType_$Impl_$.fromComp = function(cls) {
	if(cls.__jsxStatic != null) {
		return cls.__jsxStatic;
	}
	return cls;
};
var tink_core__$Callback_Callback_$Impl_$ = {};
tink_core__$Callback_Callback_$Impl_$.__name__ = true;
tink_core__$Callback_Callback_$Impl_$.invoke = function(this1,data) {
	if(tink_core__$Callback_Callback_$Impl_$.depth < 500) {
		tink_core__$Callback_Callback_$Impl_$.depth++;
		this1(data);
		tink_core__$Callback_Callback_$Impl_$.depth--;
	} else {
		var _e = this1;
		var f = function(data1) {
			tink_core__$Callback_Callback_$Impl_$.invoke(_e,data1);
		};
		var data2 = data;
		tink_core__$Callback_Callback_$Impl_$.defer(function() {
			f(data2);
		});
	}
};
tink_core__$Callback_Callback_$Impl_$.fromNiladic = function(f) {
	return f;
};
tink_core__$Callback_Callback_$Impl_$.defer = function(f) {
	process.nextTick(f);
};
var tink_core__$Callback_SimpleLink = function(f) {
	this.f = f;
};
tink_core__$Callback_SimpleLink.__name__ = true;
tink_core__$Callback_SimpleLink.prototype = {
	cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw new js__$Boot_HaxeError("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.prototype = {
	clear: function() {
		this.list = null;
		this.cb = null;
	}
	,cancel: function() {
		var _g = this.list;
		if(_g != null) {
			var v = _g;
			this.clear();
			HxOverrides.remove(v,this);
		}
	}
};
var tink_core__$Callback_CallbackList_$Impl_$ = {};
tink_core__$Callback_CallbackList_$Impl_$.__name__ = true;
tink_core__$Callback_CallbackList_$Impl_$.add = function(this1,cb) {
	var node = new tink_core__$Callback_ListCell(cb,this1);
	this1.push(node);
	return node;
};
tink_core__$Callback_CallbackList_$Impl_$.invoke = function(this1,data) {
	var _g = 0;
	var _g1 = this1.slice();
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		if(cell.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
		}
	}
};
tink_core__$Callback_CallbackList_$Impl_$.clear = function(this1) {
	var _g = 0;
	var _g1 = this1.splice(0,this1.length);
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		cell.clear();
	}
};
var tink_core_TypedError = function() { };
tink_core_TypedError.__name__ = true;
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : true, __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
var tink_core__$Future_SimpleFuture = function(f) {
	this.f = f;
};
tink_core__$Future_SimpleFuture.__name__ = true;
tink_core__$Future_SimpleFuture.prototype = {
	handle: function(callback) {
		return this.f(callback);
	}
};
var tink_core_FutureTrigger = function() {
	var this1 = [];
	this.list = this1;
};
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.prototype = {
	handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			return tink_core__$Callback_CallbackList_$Impl_$.add(v,callback);
		}
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			tink_core__$Callback_CallbackList_$Impl_$.invoke(list,result);
			tink_core__$Callback_CallbackList_$Impl_$.clear(list);
			return true;
		}
	}
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
tink_core__$Lazy_LazyFunc.__name__ = true;
tink_core__$Lazy_LazyFunc.prototype = {
	get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = true;
var tink_core__$Signal_Signal_$Impl_$ = {};
tink_core__$Signal_Signal_$Impl_$.__name__ = true;
tink_core__$Signal_Signal_$Impl_$.trigger = function() {
	return new tink_core_SignalTrigger();
};
var tink_core_SignalTrigger = function() {
};
tink_core_SignalTrigger.__name__ = true;
var tink_state__$Observable_Observable_$Impl_$ = {};
tink_state__$Observable_Observable_$Impl_$.__name__ = true;
tink_state__$Observable_Observable_$Impl_$.get_value = function(this1) {
	return tink_state__$Observable_Observable_$Impl_$.measure(this1).a;
};
tink_state__$Observable_Observable_$Impl_$.map = function(this1,f) {
	return tink_state__$Observable_Observable_$Impl_$.create(function() {
		var m = tink_state__$Observable_Observable_$Impl_$.measure(this1);
		var this2 = new tink_core_MPair(f(m.a),m.b);
		var this3 = this2;
		return this3;
	});
};
tink_state__$Observable_Observable_$Impl_$.measure = function(this1) {
	var before = tink_state__$Observable_Observable_$Impl_$.stack.first();
	tink_state__$Observable_Observable_$Impl_$.stack.push(this1);
	var p = this1.poll();
	var _g = ((before) instanceof tink_state__$Observable_AutoObservable) ? before : null;
	if(_g != null) {
		var v = _g;
		v.subscribe(p.b);
	}
	tink_state__$Observable_Observable_$Impl_$.stack.pop();
	return p;
};
tink_state__$Observable_Observable_$Impl_$.bind = function(this1,options,cb) {
	var cb1;
	if(options == null) {
		cb1 = cb;
	} else {
		var _g1 = options.direct;
		var _g = options.comparator;
		if(_g == null) {
			cb1 = cb;
		} else {
			var equal = _g;
			var isFirst = true;
			var last = null;
			cb1 = function(data) {
				if(isFirst) {
					isFirst = false;
					tink_core__$Callback_Callback_$Impl_$.invoke(cb,data);
				} else if(!equal(last,data)) {
					tink_core__$Callback_Callback_$Impl_$.invoke(cb,data);
				}
				last = data;
			};
		}
	}
	if(options == null) {
		var scheduled = false;
		var active = true;
		var updated = null;
		var link = null;
		var update = function() {
			if(active) {
				var next = tink_state__$Observable_Observable_$Impl_$.measure(this1);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb1,next.a);
				scheduled = false;
				link = next.b.handle(updated);
			}
		};
		var doSchedule = function() {
			if(scheduled) {
				return;
			}
			scheduled = true;
			tink_state__$Observable_Observable_$Impl_$.schedule(update);
		};
		updated = tink_core__$Callback_Callback_$Impl_$.fromNiladic(doSchedule);
		doSchedule();
		var this2 = new tink_core__$Callback_SimpleLink(function() {
			if(active) {
				active = false;
				if(link != null) {
					link.cancel();
				}
			}
		});
		return this2;
	} else {
		var _g3 = options.direct;
		var _g2 = options.comparator;
		if(_g3 == null) {
			var scheduled1 = false;
			var active1 = true;
			var updated1 = null;
			var link1 = null;
			var update1 = function() {
				if(active1) {
					var next1 = tink_state__$Observable_Observable_$Impl_$.measure(this1);
					tink_core__$Callback_Callback_$Impl_$.invoke(cb1,next1.a);
					scheduled1 = false;
					link1 = next1.b.handle(updated1);
				}
			};
			var doSchedule1 = function() {
				if(scheduled1) {
					return;
				}
				scheduled1 = true;
				tink_state__$Observable_Observable_$Impl_$.schedule(update1);
			};
			updated1 = tink_core__$Callback_Callback_$Impl_$.fromNiladic(doSchedule1);
			doSchedule1();
			var this3 = new tink_core__$Callback_SimpleLink(function() {
				if(active1) {
					active1 = false;
					if(link1 != null) {
						link1.cancel();
					}
				}
			});
			return this3;
		} else if(_g3 == false) {
			var scheduled2 = false;
			var active2 = true;
			var updated2 = null;
			var link2 = null;
			var update2 = function() {
				if(active2) {
					var next2 = tink_state__$Observable_Observable_$Impl_$.measure(this1);
					tink_core__$Callback_Callback_$Impl_$.invoke(cb1,next2.a);
					scheduled2 = false;
					link2 = next2.b.handle(updated2);
				}
			};
			var doSchedule2 = function() {
				if(scheduled2) {
					return;
				}
				scheduled2 = true;
				tink_state__$Observable_Observable_$Impl_$.schedule(update2);
			};
			updated2 = tink_core__$Callback_Callback_$Impl_$.fromNiladic(doSchedule2);
			doSchedule2();
			var this4 = new tink_core__$Callback_SimpleLink(function() {
				if(active2) {
					active2 = false;
					if(link2 != null) {
						link2.cancel();
					}
				}
			});
			return this4;
		} else {
			var link3 = null;
			var update3 = null;
			update3 = function(_) {
				var next3 = tink_state__$Observable_Observable_$Impl_$.measure(this1);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb1,next3.a);
				link3 = next3.b.handle(update3);
			};
			update3(tink_core_Noise.Noise);
			var this5 = new tink_core__$Callback_SimpleLink(function() {
				if(link3 != null) {
					link3.cancel();
				}
			});
			return this5;
		}
	}
};
tink_state__$Observable_Observable_$Impl_$.schedule = function(f) {
	var _g = tink_state__$Observable_Observable_$Impl_$.scheduled;
	if(_g == null) {
		f();
	} else {
		var v = _g;
		v.push(f);
		tink_state__$Observable_Observable_$Impl_$.scheduleUpdate();
	}
};
tink_state__$Observable_Observable_$Impl_$.scheduleUpdate = function() {
	if(!tink_state__$Observable_Observable_$Impl_$.isScheduled) {
		tink_state__$Observable_Observable_$Impl_$.isScheduled = true;
		if(tink_state__$Observable_Observable_$Impl_$.hasRAF) {
			window.requestAnimationFrame(function(_) {
				tink_state__$Observable_Observable_$Impl_$.scheduledRun();
			});
		} else {
			tink_core__$Callback_Callback_$Impl_$.defer(tink_state__$Observable_Observable_$Impl_$.scheduledRun);
		}
	}
};
tink_state__$Observable_Observable_$Impl_$.scheduledRun = function() {
	tink_state__$Observable_Observable_$Impl_$.isScheduled = false;
	tink_state__$Observable_Observable_$Impl_$.updatePending();
};
tink_state__$Observable_Observable_$Impl_$.updatePending = function(maxSeconds) {
	if(maxSeconds == null) {
		maxSeconds = .01;
	}
	var end = Date.now() / 1000 + maxSeconds;
	while(true) {
		var old = tink_state__$Observable_Observable_$Impl_$.scheduled;
		tink_state__$Observable_Observable_$Impl_$.scheduled = [];
		var _g = 0;
		while(_g < old.length) {
			var o = old[_g];
			++_g;
			o();
		}
		if(!(tink_state__$Observable_Observable_$Impl_$.scheduled.length > 0 && Date.now() / 1000 < end)) {
			break;
		}
	}
	if(tink_state__$Observable_Observable_$Impl_$.scheduled.length > 0) {
		tink_state__$Observable_Observable_$Impl_$.scheduleUpdate();
		return true;
	} else {
		return false;
	}
};
tink_state__$Observable_Observable_$Impl_$.create = function(f) {
	return new tink_state__$Observable_SimpleObservable(f);
};
tink_state__$Observable_Observable_$Impl_$.auto = function(f) {
	return new tink_state__$Observable_AutoObservable(f);
};
tink_state__$Observable_Observable_$Impl_$.const = function(value) {
	return new tink_state_ConstObservable(value);
};
tink_state__$Observable_Observable_$Impl_$.untracked = function(f) {
	tink_state__$Observable_Observable_$Impl_$.stack.push(null);
	return tink_core_TypedError.tryFinally(f,($_=tink_state__$Observable_Observable_$Impl_$.stack,$bind($_,$_.pop)));
};
var tink_state__$Observable_SimpleObservable = function(f) {
	this._poll = f;
};
tink_state__$Observable_SimpleObservable.__name__ = true;
tink_state__$Observable_SimpleObservable.prototype = {
	resetCache: function(_) {
		this.cache = null;
	}
	,poll: function() {
		var count = 0;
		var last = null;
		while(this.cache == null) {
			var cache = this.cache = this._poll();
			if(last == cache) {
				throw new js__$Boot_HaxeError("Polling loops on the same value");
			}
			last = cache;
			cache.b.handle($bind(this,this.resetCache));
			if(count++ >= 100) {
				throw new js__$Boot_HaxeError("Polling not concluded after 100 iterations");
			}
		}
		return this.cache;
	}
};
var tink_state__$Observable_Transform_$Impl_$ = {};
tink_state__$Observable_Transform_$Impl_$.__name__ = true;
tink_state__$Observable_Transform_$Impl_$.plain = function(f) {
	var this1 = f;
	return this1;
};
var tink_state_ConstObservable = function(value) {
	var this1 = new tink_core_MPair(value,tink_state_ConstObservable.NEVER);
	var this2 = this1;
	this.m = this2;
};
tink_state_ConstObservable.__name__ = true;
tink_state_ConstObservable.prototype = {
	poll: function() {
		return this.m;
	}
};
var tink_state__$Observable_AutoObservable = function(comp) {
	this.subscriptions = new haxe_ds_ObjectMap();
	var _gthis = this;
	tink_state__$Observable_SimpleObservable.call(this,function() {
		_gthis.subscriptions = new haxe_ds_ObjectMap();
		_gthis.trigger = new tink_core_FutureTrigger();
		var this1 = new tink_core_MPair(comp.f(),_gthis.trigger);
		var this2 = this1;
		return this2;
	});
};
tink_state__$Observable_AutoObservable.__name__ = true;
tink_state__$Observable_AutoObservable.__super__ = tink_state__$Observable_SimpleObservable;
tink_state__$Observable_AutoObservable.prototype = $extend(tink_state__$Observable_SimpleObservable.prototype,{
	subscribe: function(change) {
		if(this.subscriptions.h.__keys__[change.__id__] == null) {
			var this1 = this.subscriptions;
			var v = change.handle(($_=this.trigger,$bind($_,$_.trigger)));
			this1.set(change,v);
		}
	}
});
var tink_state__$State_State_$Impl_$ = {};
tink_state__$State_State_$Impl_$.__name__ = true;
tink_state__$State_State_$Impl_$.get_value = function(this1) {
	return tink_state__$Observable_Observable_$Impl_$.get_value(this1);
};
var tink_state__$State_SimpleState = function(value,isEqual,guard) {
	this.value = value;
	this.isEqual = isEqual;
	this.guard = guard;
	this.arm();
};
tink_state__$State_SimpleState.__name__ = true;
tink_state__$State_SimpleState.prototype = {
	poll: function() {
		return this.next;
	}
	,arm: function() {
		this.trigger = new tink_core_FutureTrigger();
		var this1 = new tink_core_MPair(this.value,this.trigger);
		var this2 = this1;
		this.next = this2;
	}
	,set: function(value) {
		if(this.guard != null) {
			value = this.guard(value,this.value);
		}
		var b = this.value;
		if(this.isEqual == null ? value != b : !this.isEqual(value,b)) {
			this.value = value;
			var last = this.trigger;
			this.arm();
			last.trigger(tink_core_Noise.Noise);
		}
	}
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if(typeof $global.$haxeUID == "undefined") $global.$haxeUID = 0;
String.__name__ = true;
Array.__name__ = true;
var $$tre = (typeof Symbol === "function" && Symbol.for && Symbol.for("react.element")) || 0xeac7;
Object.defineProperty(coconut_ui_ViewBase.prototype,"props",{ get : function() {
	return this.__props;
}, set : function(attr) {
	if(attr != null) {
		this.__props = attr;
		this.__initAttributes(attr);
	}
}});
haxe_ds_ObjectMap.count = 0;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
coconut_ui_View.idCounter = 0;
tink_core__$Callback_Callback_$Impl_$.depth = 0;
tink_state__$Observable_Observable_$Impl_$.stack = new haxe_ds_List();
tink_state__$Observable_Observable_$Impl_$.scheduled = [];
tink_state__$Observable_Observable_$Impl_$.hasRAF = typeof window != 'undefined' && 'requestAnimationFrame' in window;
tink_state__$Observable_Observable_$Impl_$.isScheduled = false;
tink_state_ConstObservable.NEVER = (function($this) {
	var $r;
	var this1 = new tink_core__$Future_SimpleFuture(function(_) {
		return null;
	});
	$r = this1;
	return $r;
}(this));
client_ClientApp.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
